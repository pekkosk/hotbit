(S'85d1209b1058668aa51a5543eec9ae49'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
(dp6
S'make_parfile'
p7
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p8
(dp9
g4
((dp10
(dp11
tp12
sS'_exception_info'
p13
(dp14
sS'_parameter_names'
p15
(S'el1'
p16
S'el2'
p17
S'file1'
p18
S'file2'
p19
S'ofile'
p20
tp21
sS'_parameter_info'
p22
(dp23
g17
(NNNtp24
sg19
(NNNtp25
sg18
(NNNtp26
sg16
(NNNtp27
sg20
(NNNtp28
ssS'_filename'
p29
S'tb_tools.py'
p30
sS'_docstring'
p31
S"\n    Given two files containing the Slater-Koster tables\n    for one (or two) elements, makes .par -file\n    in the correct format.\n    \n    Input:\n        el1   - symbol for element 1\n        el2   - symbol for element 2\n        file1 - file containing el1-el2(!!) Slater-Koster table (just numbers)\n                in the r,dds,ddp,ddd,pds,pdp,pps,ppp,sds,sps,sss\n                (first H, then S) -format\n        file2 - the same thing for el2-el1 table (ignored, if el1==el2)\n                NOTE: the ordering of elements IS RELEVANT!\n    Output:\n        ofile - the output file (in .par -format)    \n        'diff.out' - the output file for the differences (errors\n                for ddX, ppX and sss -integrals, which should be the same)\n            \n    Author: P. Koskinen 27.9 2006\n    "
p32
sS'_name'
p33
g7
sS'_parent'
p34
g2
sS'_comment_info'
p35
(dp36
sS'_configuration_values'
p37
(dp38
sS'_class_info'
p39
g10
sS'_function_info'
p40
g11
sS'_comments'
p41
S''
sbsS'read_vectors'
p42
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p43
(dp44
g4
((dp45
(dp46
tp47
sg13
(dp48
sg15
(S'traj'
p49
S'file'
p50
S'name'
p51
tp52
sg22
(dp53
g51
(NNNtp54
sg50
(NNNtp55
sg49
(NNNtp56
ssg29
g30
sg31
S"\n    Read general vector information into the trajectory.\n    That is, each atom has some general vector property.\n    The file has to be compatible with the trajectory.\n    \n    file = file name for the vector data\n    name = variable name describing the vector data (used as internal variable)\n    \n    Example: tb_tools.read_vectors(traj,'vecs.out','vecs')        \n    "
p57
sg33
g42
sg34
g2
sg35
g36
sg37
(dp58
sg39
g45
sg40
g46
sg41
S''
sbsS'cmp_parfiles'
p59
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p60
(dp61
g4
((dp62
(dp63
tp64
sg13
(dp65
sg15
(S'e1'
p66
S'e2'
p67
S'file1'
p68
S'file2'
p69
S'output'
p70
tp71
sg22
(dp72
g69
(NNNtp73
sg68
(NNNtp74
sg70
(NNNtp75
sg66
(NNNtp76
sg67
(NNNtp77
ssg29
g30
sg31
S" Makes gnuplot files to compare two .par-files \n        Input:\n            e1    - element #1\n            e2    - element #2\n            file1 - .par file #1\n            file2 - .par file #2\n            output - output gnuplot file (.gp and .ps)\n        Example:\n            cmp_parfiles('C_H.par','param/C_H.par','C_H_cmp')\n    "
p78
sg33
g59
sg34
g2
sg35
g36
sg37
(dp79
sg39
g62
sg40
g63
sg41
S''
sbsS'read_forces'
p80
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p81
(dp82
g4
((dp83
(dp84
tp85
sg13
(dp86
sg15
(S'traj'
p87
S'f_forces'
p88
tp89
sg22
(dp90
g88
(NNNtp91
sg87
(NNNtp92
ssg29
g30
sg31
S"\n    Read force information into the trajectory.\n    The file for forces has to be compatible with the trajectory.\n    Example: tb_tools.read_forces(traj,'forces.out')        \n    "
p93
sg33
g80
sg34
g2
sg35
g36
sg37
(dp94
sg39
g83
sg40
g84
sg41
S''
sbsS'merge_repulsion_parfile'
p95
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p96
(dp97
g4
((dp98
(dp99
tp100
sg13
(dp101
sg15
(S'el1'
p102
S'el2'
p103
S'tfile'
p104
S'vfile'
p105
S'ofile'
p106
S'comments'
p107
tp108
sg22
(dp109
g105
(NNNtp110
sg104
(NNNtp111
sg107
(I1
S"[ '' ]"
Ntp112
sg103
(NNNtp113
sg102
(NNNtp114
sg106
(NNNtp115
ssg29
g30
sg31
S"\n    Merge the repulsive function into existing .par -file.\n    Input:\n      el1   - element 1 symbol\n      el2   - element 2 symbol\n      tfile - the existing .par -file\n      vfile - the repulsive function ( syntax: R,V(R) )\n      ofile - the merged output file\n      comments - list of comment strings\n    Output:\n      -\n    Example:\n      merge_repulsion_parfile('H','H','sltab.dat','vrep.out','sltab_merge.dat')\n    "
p116
sg33
g95
sg34
g2
sg35
g36
sg37
(dp117
sg39
g98
sg40
g99
sg41
S''
sbsS'tb_interactive'
p118
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p119
(dp120
g4
((dp121
(dp122
tp123
sg13
(dp124
sg15
(S'mol'
p125
S'mode'
p126
S'f'
tp127
sg22
(dp128
S'f'
(I1
S'None'
Ntp129
sg126
(I1
S"'energy'"
Ntp130
sg125
(NNNtp131
ssg29
g30
sg31
S" \n    Use the tight-binding code interactively be feeding it atom coordinates\n    and reading energies and forces.\n    \n    mol - molecule object from the md.Molecule class\n    mode\n        'start' - start session and return a tuple of file-like object used \n                  in the interactive use (f_in,f_out)\n        'energy' - return the energy \n        'stop'   - stop the session, end the pipe and close the file objects.\n        \n    Examples:\n        files =tb_tools.tb_interactive(molecule,'start')     (start session)\n        energy=tb_tools.tb_interactive(molecule,'energy',files)\n        tb_tools.tb_interactive(molecule,'stop',files)       (end session)\n    "
p132
sg33
g118
sg34
g2
sg35
g36
sg37
(dp133
sg39
g121
sg40
g122
sg41
S''
sbsS'tb_energy'
p134
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p135
(dp136
g4
((dp137
(dp138
tp139
sg13
(dp140
sg15
(S'mol'
p141
S'folder'
p142
S'ret'
p143
tp144
sg22
(dp145
g142
(NNNtp146
sg143
(NNNtp147
sg141
(NNNtp148
ssg29
g30
sg31
S"\n    Function which calls the tb-code to calculate the\n    energy of the current molecule mol. The tb code\n    resides in the 'folder' and executable tb is in\n    subfolder source.\n    \n    Parameters:\n      mol    - an instance of Molecule\n      folder - the location of the (compiled) tb code from current\n               path, or absolute path\n      ret    - the energy to return ('Epot','Ebs','Ekin','Ecoul',\n               'Erep','Ecl','Tkin')\n    \n    Example: \n      e_bs=tb_energy(molec,'dftb','Ebs')\n \n    "
p149
sg33
g134
sg34
g2
sg35
g36
sg37
(dp150
sg39
g137
sg40
g138
sg41
S''
sbsS'read_charges'
p151
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p152
(dp153
g4
((dp154
(dp155
tp156
sg13
(dp157
sg15
(S'traj'
p158
S'f_charges'
p159
tp160
sg22
(dp161
g159
(NNNtp162
sg158
(NNNtp163
ssg29
g30
sg31
S"\n    Read charge information into the trajectory.\n    The file for charges has to be compatible with the trajectory.\n    Example: tb_tools.read_charges(traj,'charges.out')        \n    "
p164
sg33
g151
sg34
g2
sg35
g36
sg37
(dp165
sg39
g154
sg40
g155
sg41
S''
sbsS'read_trajectory'
p166
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p167
(dp168
g4
((dp169
(dp170
tp171
sg13
(dp172
sg15
(S'traj'
p173
tp174
sg22
(dp175
g173
(NNNtp176
ssg29
g30
sg31
S"\n    Read the molecule trajectory from xyz-file.\n    Example: traj=tb_tools.read_trajectory('traj.xyz')\n    "
p177
sg33
g166
sg34
g2
sg35
g36
sg37
(dp178
sg39
g169
sg40
g170
sg41
S''
sbsS'traj_vtk_output'
p179
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p180
(dp181
g4
((dp182
(dp183
tp184
sg13
(dp185
sg15
(S'traj'
p186
S'fn'
p187
S'folder'
p188
S'every'
p189
tp190
sg22
(dp191
g188
(NNNtp192
sg189
(I1
S'1'
Ntp193
sg187
(NNNtp194
sg186
(NNNtp195
ssg29
g30
sg31
S"\n    Output the whole trajectory (traj as md.Molecule) as VTK files in \n    folder with given file name (fn). Optionally, plot only every 'every' frame.\n    Example: tb_tools.traj_vtk_output(traj,'vtk_output')\n    "
p196
sg33
g179
sg34
g2
sg35
g36
sg37
(dp197
sg39
g182
sg40
g183
sg41
S''
sbsS'check_parfile'
p198
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p199
(dp200
g4
((dp201
(dp202
tp203
sg13
(dp204
sg15
(S'file'
p205
S'el1'
p206
S'el2'
p207
S'efile'
p208
tp209
sg22
(dp210
g207
(NNNtp211
sg206
(NNNtp212
sg208
(NNNtp213
sg205
(NNNtp214
ssg29
g30
sg31
S" Check that Slater-Koster tables are ok. Abort with error if not ok.\n        Input:\n            file - Slater-Koster parameter file\n            el1 - element1\n            el2 - element2\n            efile - the elements.dat -file\n        Example:\n            check_parfile('H_Mg.par','H','Mg','param/elements.dat')\n    "
p215
sg33
g198
sg34
g2
sg35
g36
sg37
(dp216
sg39
g201
sg40
g202
sg41
S''
sbsS'tb_log_inquiry'
p217
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p218
(dp219
g4
((dp220
(dp221
tp222
sg13
(dp223
sg15
(S'log'
p224
S'ret'
p225
tp226
sg22
(dp227
g224
(NNNtp228
sg225
(NNNtp229
ssg29
g30
sg31
S"\n    Searches for values from TBLMD tb.log.\n    \n    Input:\n        log - name of the tb.log -file\n        s   - quantitypos to search, e.g. enesgies:\n              'Epot','Ebs','Ekin','Ecoul','Erep','Ecl','Tkin'\n    \n    Example:          \n        Ebs = tb_log_inquiry('tb.log','Ebs')\n    \n    "
p230
sg33
g217
sg34
g2
sg35
g36
sg37
(dp231
sg39
g220
sg40
g221
sg41
S''
sbsS'read_velocities'
p232
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p233
(dp234
g4
((dp235
(dp236
tp237
sg13
(dp238
sg15
(S'traj'
p239
S'f_velocities'
p240
tp241
sg22
(dp242
g240
(NNNtp243
sg239
(NNNtp244
ssg29
g30
sg31
S"\n    Read velocity information into the trajectory.\n    The file for velocities has to be compatible with the trajectory.\n    Example: tb_tools.read_velocities(traj,'velocities.out')        \n    "
p245
sg33
g232
sg34
g2
sg35
g36
sg37
(dp246
sg39
g235
sg40
g236
sg41
S''
sbstp247
sS'_import_info'
p248
(ihappydoclib.parseinfo.imports
ImportInfo
p249
(dp250
S'_named_imports'
p251
(dp252
sS'_straight_imports'
p253
(lp254
sbsg29
g30
sg31
S'"""\n    tb_tools - the module for tight-binding calculations\n    \n    Contains miscellaneous auxiliary subroutines for\n    the use of the TBLMD-code\n    \n    Author: P. Koskinen 22.9 2006\n"""'
p255
sg33
S'tb_tools'
p256
sg34
Nsg35
g36
sg37
(dp257
S'include_comments'
p258
I1
sS'cacheFilePrefix'
p259
S'.happydoc.'
p260
sS'useCache'
p261
I1
sS'docStringFormat'
p262
S'StructuredText'
p263
ssg39
g5
sg40
g6
sg41
S''
sbt.