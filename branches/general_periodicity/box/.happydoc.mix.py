(S'866aad58ba6bee8abf83b05e82c7f948'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'IFunction'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'__call__'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
S'x'
S'der'
p21
tp22
sS'_parameter_info'
p23
(dp24
S'x'
(NNNtp25
sg20
(NNNtp26
sg21
(I1
S'0'
Ntp27
ssS'_filename'
p28
S'box/mix.py'
p29
sS'_docstring'
p30
S'Evaluate function or its derivatives (der=1,2) at x.'
p31
sS'_name'
p32
g11
sS'_parent'
p33
g7
sS'_comment_info'
p34
(dp35
sS'_configuration_values'
p36
(dp37
sS'_class_info'
p38
g14
sS'_function_info'
p39
g15
sS'_comments'
p40
S''
sbsS'integrate'
p41
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p42
(dp43
g4
((dp44
(dp45
tp46
sg17
(dp47
sg19
(S'self'
p48
S'x1'
p49
S'x2'
p50
tp51
sg23
(dp52
g50
(NNNtp53
sg48
(NNNtp54
sg49
(NNNtp55
ssg28
g29
sg30
S'Integrate the function from x1 to x2.'
p56
sg32
g41
sg33
g7
sg34
g35
sg36
(dp57
sg38
g44
sg39
g45
sg40
S''
sbsS'__init__'
p58
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p59
(dp60
g4
((dp61
(dp62
tp63
sg17
(dp64
sg19
(S'self'
p65
S'x'
S'y'
S's'
tp66
sg23
(dp67
S'y'
(NNNtp68
sS'x'
(NNNtp69
sg65
(NNNtp70
sS's'
(I1
S'0'
Ntp71
ssg28
g29
sg30
S' x is the grid and y the corresponding values.\n            s is the "smoothness", default s=0 (f(x_i)=y_i exactly)\n        '
p72
sg32
g58
sg33
g7
sg34
g35
sg36
(dp73
sg38
g61
sg39
g62
sg40
S''
sbstp74
sg28
g29
sg30
S'Simple class for interpolating functions on a grid.'
p75
sS'_class_member_info'
p76
(lp77
sg32
g6
sg33
g2
sg34
g35
sS'_base_class_info'
p78
(lp79
sg36
(dp80
sg38
g9
sg39
g10
sg40
S''
sbsS'Const'
p81
(ihappydoclib.parseinfo.classinfo
ClassInfo
p82
(dp83
g4
((dp84
(dp85
S'list_constants'
p86
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p87
(dp88
g4
((dp89
(dp90
tp91
sg17
(dp92
sg19
(S'self'
p93
tp94
sg23
(dp95
g93
(NNNtp96
ssg28
g29
sg30
S' List all the constants in this object. '
p97
sg32
g86
sg33
g82
sg34
g35
sg36
(dp98
sg38
g89
sg39
g90
sg40
S''
sbsS'info'
p99
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p100
(dp101
g4
((dp102
(dp103
tp104
sg17
(dp105
sg19
(S'self'
p106
S'const'
p107
tp108
sg23
(dp109
g106
(NNNtp110
sg107
(NNNtp111
ssg28
g29
sg30
S' Print info for the given constant. '
p112
sg32
g99
sg33
g82
sg34
g35
sg36
(dp113
sg38
g102
sg39
g103
sg40
S''
sbsS'search'
p114
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p115
(dp116
g4
((dp117
(dp118
tp119
sg17
(dp120
sg19
(S'self'
p121
S'st'
p122
tp123
sg23
(dp124
g121
(NNNtp125
sg122
(NNNtp126
ssg28
g29
sg30
S' Search a part of string from the constant database. '
p127
sg32
g114
sg33
g82
sg34
g35
sg36
(dp128
sg38
g117
sg39
g118
sg40
S''
sbsS'add_const'
p129
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p130
(dp131
g4
((dp132
(dp133
tp134
sg17
(dp135
sg19
(S'self'
p136
S'st'
p137
tp138
sg23
(dp139
g136
(NNNtp140
sg137
(NNNtp141
ssg28
g29
sg30
S' Add constant (given as string) to list. '
p142
sg32
g129
sg33
g82
sg34
g35
sg36
(dp143
sg38
g132
sg39
g133
sg40
S''
sbsS'__init__'
p144
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p145
(dp146
g4
((dp147
(dp148
tp149
sg17
(dp150
sg19
(S'self'
p151
S'lst'
p152
tp153
sg23
(dp154
g151
(NNNtp155
sg152
(NNNtp156
ssg28
g29
sg30
S''
sg32
g144
sg33
g82
sg34
g35
sg36
(dp157
sg38
g147
sg39
g148
sg40
S''
sbstp158
sg28
g29
sg30
S" Simple class for constants. \n    \n        Example:\n            const=Const()\n            E=const.kB*T\n            const.list_constants() -> list of available constants\n            const.search('Boltzmann')\n    "
p159
sg76
(lp160
S'constants'
p161
asg32
g81
sg33
g2
sg34
g35
sg78
(lp162
sg36
(dp163
sg38
g84
sg39
g85
sg40
S''
sbs(dp164
S'execute'
p165
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p166
(dp167
g4
((dp168
(dp169
tp170
sg17
(dp171
sg19
(S'cmd'
p172
S'echo'
p173
tp174
sg23
(dp175
g172
(NNNtp176
sg173
(I1
S'True'
Ntp177
ssg28
g29
sg30
S''
sg32
g165
sg33
g2
sg34
g35
sg36
(dp178
sg38
g168
sg39
g169
sg40
S''
sbsS'a2s'
p179
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p180
(dp181
g4
((dp182
(dp183
tp184
sg17
(dp185
sg19
(S'a'
S'fmt'
p186
S'end'
p187
tp188
sg23
(dp189
S'a'
(NNNtp190
sg186
(I1
S"'%g'"
Ntp191
sg187
(I1
S"'\\n'"
Ntp192
ssg28
g29
sg30
S' Transforms vector array into a string with given format.'
p193
sg32
g179
sg33
g2
sg34
g35
sg36
(dp194
sg38
g182
sg39
g183
sg40
S''
sbsS'abs_sum'
p195
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p196
(dp197
g4
((dp198
(dp199
tp200
sg17
(dp201
sg19
(S'a'
tp202
sg23
(dp203
S'a'
(NNNtp204
ssg28
g29
sg30
S' Return the sum of all elements (absolute values) in array. '
p205
sg32
g195
sg33
g2
sg34
g35
sg36
(dp206
sg38
g198
sg39
g199
sg40
S''
sbsS'read'
p207
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p208
(dp209
g4
((dp210
(dp211
tp212
sg17
(dp213
sg19
(S'file'
p214
S'commentchar'
p215
S'fmt'
p216
tp217
sg23
(dp218
g216
(I1
S"'array'"
Ntp219
sg215
(I1
S"'#'"
Ntp220
sg214
(NNNtp221
ssg28
g29
sg30
S' \n    Read a data set from given file.\n    \n    * file -- file name of file object (for object the "next" set is read)\n    * commentchar -- character for comments, which are not read\n    * fmt -- format for output:\n        \n        - \'array\' -- return two-dimensional numpy array\n        - \'string\' -- return the set as a list of strings\n    '
p222
sg32
g207
sg33
g2
sg34
g35
sg36
(dp223
sg38
g210
sg39
g211
sg40
S''
sbsS'add_to_file'
p224
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p225
(dp226
g4
((dp227
(dp228
tp229
sg17
(dp230
sg19
(S's'
S'file'
p231
tp232
sg23
(dp233
S's'
(NNNtp234
sg231
(NNNtp235
ssg28
g29
sg30
S'Add string to a file.'
p236
sg32
g224
sg33
g2
sg34
g35
sg36
(dp237
sg38
g227
sg39
g228
sg40
S''
sbsS'read_column'
p238
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p239
(dp240
g4
((dp241
(dp242
tp243
sg17
(dp244
sg19
(S'col'
p245
S'file'
p246
S'commentchar'
p247
tp248
sg23
(dp249
g247
(I1
S"'#'"
Ntp250
sg245
(NNNtp251
sg246
(NNNtp252
ssg28
g29
sg30
S"\n    Load a column with name col into one-dimensional NumPy array.\n    The first row identifies the columns, and starts with commentchar.\n    Example: energies=mix.read_column('energy','stuff.out')\n    (stuff.out begins e.g. # time temperature energy distance ...)\n    "
p253
sg32
g238
sg33
g2
sg34
g35
sg36
(dp254
sg38
g241
sg39
g242
sg40
S''
sbsS'run_and_arrange'
p255
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p256
(dp257
g4
((dp258
(dp259
tp260
sg17
(dp261
sg19
(S'cmd'
p262
S'ifiles'
p263
S'workd'
p264
S'odir'
p265
S'ofiles'
p266
S'cmd2'
p267
S'echo'
p268
S'overwrite'
p269
S'if_failure'
p270
tp271
sg23
(dp272
g263
(NNNtp273
sg265
(NNNtp274
sg270
(I1
S"'stop'"
Ntp275
sg262
(NNNtp276
sg264
(NNNtp277
sg267
(NNNtp278
sg268
(I1
S'True'
Ntp279
sg269
(I1
S'True'
Ntp280
sg266
(NNNtp281
ssg28
g29
sg30
S"\n    Copy input files from idir into work directory, run a program,\n    move output files into odir directory, and maybe \n    still run a command in the odir directory'\n    \n    Parameters:\n      cmd: execute command in workd\n      ifiles:  dictionary of directories (=keys) and a list of input files \n               (=values) e.g. ifiles={inpdir:['ifile1.in','ifile2.in']}\n      workd:   the work directory\n      odir:    output directory, where output files are stored\n      ifiles:  list of input files for cmd that are in idir\n      ofiles:  output files after cmd to be moved into o\n      cmd2:    auxiliary command (e.g. analysis of the results)\n               in the odir after moving.\n      echo:    if True(default), prints some trivial output\n      overwrite: (default=True) overwrite the ofiles if they already\n               exist in odir. Otherwise stop the script.\n      if_failure:\n               what to do if cmd failes, 'stop'(default), 'cont' \n               \n    Example:\n      failure=run_and_arrange('./run',{idir:['input.dat']},'work','outdir',                              ['data.out','data2.out'],'./post_process')\n    "
p282
sg32
g255
sg33
g2
sg34
g35
sg36
(dp283
sg38
g258
sg39
g259
sg40
S''
sbsS'write'
p284
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p285
(dp286
g4
((dp287
(dp288
tp289
sg17
(dp290
sg19
(S'file'
p291
S'a'
S'fmt'
p292
tp293
sg23
(dp294
S'a'
(NNNtp295
sg292
(I1
S"'%g'"
Ntp296
sg291
(NNNtp297
ssg28
g29
sg30
S"\n    Write a two-dimensional NumPy array a in a tabular form.\n    file can be file name or file object.\n    fmt is the format of output (Default: fmt='%g')\n    Example:\n      write('data.out',array,'%14.2f')\n      write(f,r)\n    \n    "
p298
sg32
g284
sg33
g2
sg34
g35
sg36
(dp299
sg38
g287
sg39
g288
sg40
S''
sbsS'gplot'
p300
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p301
(dp302
g4
((dp303
(dp304
tp305
sg17
(dp306
sg19
(S'string'
p307
S'file'
p308
tp309
sg23
(dp310
g307
(NNNtp311
sg308
(NNNtp312
ssg28
g29
sg30
S'Make a gnuplot file and call gnuplot to make an image from string.'
p313
sg32
g300
sg33
g2
sg34
g35
sg36
(dp314
sg38
g303
sg39
g304
sg40
S''
sbsS'error_exit'
p315
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p316
(dp317
g4
((dp318
(dp319
tp320
sg17
(dp321
sg19
(S'str'
p322
tp323
sg23
(dp324
g322
(NNNtp325
ssg28
g29
sg30
S' Simpy exit routine to shorten code.'
p326
sg32
g315
sg33
g2
sg34
g35
sg36
(dp327
sg38
g318
sg39
g319
sg40
S''
sbsS'grid'
p328
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p329
(dp330
g4
((dp331
(dp332
tp333
sg17
(dp334
sg19
(S'min'
p335
S'max'
p336
S'N'
tp337
sg23
(dp338
g336
(NNNtp339
sS'N'
(NNNtp340
sg335
(NNNtp341
ssg28
g29
sg30
S' \n    Returns a grid with min and max as end-points and (N-1) divisions.\n    '
p342
sg32
g328
sg33
g2
sg34
g35
sg36
(dp343
sg38
g331
sg39
g332
sg40
S''
sbsS'identify_column'
p344
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p345
(dp346
g4
((dp347
(dp348
tp349
sg17
(dp350
sg19
(S'col'
p351
S'file'
p352
S'commentchar'
p353
tp354
sg23
(dp355
g353
(I1
S"'#'"
Ntp356
sg351
(NNNtp357
sg352
(NNNtp358
ssg28
g29
sg30
S"\n    Return the column index (starting from 0), identified by col.\n    The first row identifies the columns, and starts with commentchar.\n    Example: i=mix.identify_column('energy','stuff.out') -> i=2 with\n    stuff.out begining e.g. # time temperature energy distance ...\n    "
p359
sg32
g344
sg33
g2
sg34
g35
sg36
(dp360
sg38
g347
sg39
g348
sg40
S''
sbsS'gauss_fct'
p361
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p362
(dp363
g4
((dp364
(dp365
tp366
sg17
(dp367
sg19
(S'x'
S'mean'
p368
S'sigma'
p369
tp370
sg23
(dp371
S'x'
(NNNtp372
sg369
(I1
S'1.'
Ntp373
sg368
(I1
S'0.'
Ntp374
ssg28
g29
sg30
S'\n    Returns 1/sqrt(2*pi*sigma**2)*exp(-(x-mean)**2/(2*sigma**2)\n    mean=0 and sigma=1 on default\n    '
p375
sg32
g361
sg33
g2
sg34
g35
sg36
(dp376
sg38
g364
sg39
g365
sg40
S''
sbsS'read_file'
p377
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p378
(dp379
g4
((dp380
(dp381
tp382
sg17
(dp383
sg19
(S'file'
p384
S'mode'
p385
S'commentchar'
p386
tp387
sg23
(dp388
g386
(I1
S"'#'"
Ntp389
sg385
(I1
S"'all'"
Ntp390
sg384
(NNNtp391
ssg28
g29
sg30
S'\n    Read the lines in file into list of strings.\n    mode:   all         - read the whole file\n            comments    - read only comments\n            nocomments  - everything but comments\n    '
p392
sg32
g377
sg33
g2
sg34
g35
sg36
(dp393
sg38
g380
sg39
g381
sg40
S''
sbsS'file_safeopen'
p394
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p395
(dp396
g4
((dp397
(dp398
tp399
sg17
(dp400
sg19
(S'file'
p401
S'action'
p402
tp403
sg23
(dp404
g402
(I1
S"'r'"
Ntp405
sg401
(NNNtp406
ssg28
g29
sg30
S"\n    Return file if file is a file-object, otherwise return the opened file \n    object and True/False if the file was opened or not. Action 'r','w','rw'.\n    "
p407
sg32
g394
sg33
g2
sg34
g35
sg36
(dp408
sg38
g397
sg39
g398
sg40
S''
sbsS'find_value'
p409
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p410
(dp411
g4
((dp412
(dp413
tp414
sg17
(dp415
sg19
(S'file'
p416
S'key'
p417
S'fmt'
p418
S'default'
p419
tp420
sg23
(dp421
g419
(I1
S'None'
Ntp422
sg418
(I1
S"'default'"
Ntp423
sg417
(NNNtp424
sg416
(NNNtp425
ssg28
g29
sg30
S"\n    Find value for key from file.\n    \n    Usage: value_string=find_key(f,key)\n           value_string_list=find_key(f,key,fmt='default')\n    \n    Input:\n      file - file object or file name\n      key  - key string (corresponding to 'key=value')\n      fmt  - the format of the value:\n             'default' = return first value as string from the same line\n             'all'     = return the whole line from the same line\n             'onestr'  = return the whole line from the same line as one string\n             'matrix'  = return a matrix coming after key as float\n             'strings' = return the non-empty lines coming after the key as str\n             'test'    = return True if key found, otherwise False\n    \n    Example: f=open('data.txt')\n             mass=float( find_value(f,'mass') )\n             mat = find_value(f,'m','matrix')\n    "
p426
sg32
g409
sg33
g2
sg34
g35
sg36
(dp427
sg38
g412
sg39
g413
sg40
S''
sbsS'norm'
p428
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p429
(dp430
g4
((dp431
(dp432
tp433
sg17
(dp434
sg19
(S'a'
tp435
sg23
(dp436
S'a'
(NNNtp437
ssg28
g29
sg30
S'\n    Return the norm of the vector a.\n    '
p438
sg32
g428
sg33
g2
sg34
g35
sg36
(dp439
sg38
g431
sg39
g432
sg40
S''
sbstp440
sS'_import_info'
p441
(ihappydoclib.parseinfo.imports
ImportInfo
p442
(dp443
S'_named_imports'
p444
(dp445
sS'_straight_imports'
p446
(lp447
sbsg28
g29
sg30
S"'''\n    A module containing miscellanous utility functions.\n\n    Author: P. Koskinen 11.9 2006-\n\n\n'''"
p448
sg32
S'mix'
p449
sg33
Nsg34
g35
sg36
(dp450
S'include_comments'
p451
I1
sS'cacheFilePrefix'
p452
S'.happydoc.'
p453
sS'useCache'
p454
I1
sS'docStringFormat'
p455
S'StructuredText'
p456
ssg38
g5
sg39
g164
sg40
S''
sbt.