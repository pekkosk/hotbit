#!/usr/bin/env python
'''
    The main script for running the HOTBIT SCC-DFTB code.
    
    Usage:
        hb {options} [mode]
        
    Type hb -h or --help to check options.
    
    Available modes:
        run
        copy
        compile 
        check   
        update_source
        clearout
        calculation
        progress
    
    Examples: (typical session for setting up code)
        hb copy
        hb compile
        (...setup input files...)
        hb run
        hb check
        
    Author: P.Koskinen 14.11 2006
'''

import os,sys,shutil
import box.mix as mix
env = os.environ.get
opj = os.path.join
cpt = shutil.copytree
opif = os.path.isfile
opid = os.path.isdir
opil = os.path.islink

    
def print_warnings(log):
    """Find the lines in the log-file containing warnings and print them."""
    warnings=['error','warning','severe']
    flag=0
    l=open(log,'r')
    for line in l.readlines():
        low=line.lower()
        for text in warnings:
            warn=text.lower()
            if low.find(warn)>=0: 
                if flag==0:
                    print '\n\nWARNINGS and ERRORS:'
                    flag=1
                print line
    if flag==0: print '... No warnings in hotbit.log.'
    l.close()
    
def compile_flag(mode):
    """Sets or reads the compilation flag from /source."""
    file='source/this_source_not_compiled'
    if mode=='set':
        f=open(file,'w')
        f.write('This file indicates that the present code is not compiled.')
        f.close()
    elif mode=='compiled?':
        if os.path.isfile(file): return False
        else: return True
    elif mode=='remove':
        if os.path.isfile(file): os.remove(file)
        
    
def compilation(src,wrk,rest):
    """ Compile the code in src according to settings in md.dat. """
    import os
    mode = mix.find_value('md.dat','propagation')
    os.chdir(src)
    print 'Wave function propagation mode ',mode
    add=''
    if len(rest)>0:
        if rest[0]=='debug': add='debug'
    mix.execute("rm -f hotbit;make MODE=%s %s" %(mode,add) )
    os.chdir(wrk)
    compile_flag('remove')

# 
# parse the input arguments
#
import os
from optparse import OptionParser
parser=OptionParser()
parser.add_option('-c','--copy_param',dest='copy_param',action='store_true',\
                  help="Copy parameters, do not use symbolic link.",default=False)
parser.add_option('-i','--info_arg',dest='info',action='store_true',\
                  help="Show detailed info about the given mode.",default=False)
opt, args = parser.parse_args( sys.argv[1:] )
                  
try:
    mode = args[0]
    rest = args[1:]
except:    
    print __doc__;  sys.exit(1)
    
wrk=os.path.abspath('.')
src=opj(wrk,'source')

print '\n--------------------------------------------'
if opt.info: 
    print 'Info about the script mode',mode
else:
    print 'Executing hb script with mode "'+mode+'"' 
    
HOTBIT_DIR    = env('HOTBIT_DIR')
HOTBIT_SOURCE = HOTBIT_DIR+'/source' #env('HOTBIT_SOURCE')
HOTBIT_PARAM  = HOTBIT_DIR+'/param'  #env('HOTBIT_PARAM')

is_source = os.path.isdir('source') 
is_param  = os.path.isdir('param')

right_env = is_source and is_param
#if not opt.info and mode!='copy' and mode!='calculation' \
    #and not right_env:
    #mix.error_exit('The environment for the script is not right.')
        
if mode=='compile':
    if opt.info: 
        print 'Compile the source code using the makefile in source.'
        print '(in source/: make all MODE=BO/TDTB/SH)'
        sys.exit(0)
    print 'Compile the source code.'
    compilation(src,wrk,rest)
     
    
elif mode=='run':
    if opt.info:
        print """Submit the program for running on the background using
                 the command EXEC_COMMAND. If your machine uses batchfiles,
                 of course you have to use them instead."""
        sys.exit(0)
    print 'Run hotbit.'
    if not compile_flag('compiled?'):
        mix.error_exit('The source is not yet compiled.')
    exec_command=os.environ.get('HOTBIT_EXE')
    mix.execute('%s ./source/hotbit>hotbit.out&' %exec_command)
    #mix.execute('nohup nice -19 ./source/hotbit>hotbit.out&')
    
elif mode=='check':
    if opt.info:
        print 'Find and print all potential warnings in hotbit.log'
        sys.exit(0)
    if os.path.isfile('hotbit.out'): os.system('cat hotbit.out')
    print_warnings('hotbit.log')
    
    
elif mode=='update_source':
    if opt.info:
        print 'Delete the current source and copy the HOTBIT source code'
        print 'from HOTBIT_DIR/source'
        sys.exit(0)
    ans=raw_input('Overwrite the whole current /source directory (yes/no)? ')
    if ans.strip()=='yes':
        mix.execute('rm -r source')
        mix.execute('cp -r %s source' %HOTBIT_SOURCE )
        compile_flag('set')
    else:
        print 'Abort.'
    
elif mode=='copy':
    if opt.info:
        print 'Set up the HOTBIT code in the current directory.'
        print 'The source is copied and param is linked or copied.'
        print '*.dat files are also set up unless they already exist.'
        sys.exit(0)
    print 'Set up the code in current directory.'
    if is_source or is_param:
        mix.error_exit('source and/or param exist already.')
    cpt( HOTBIT_SOURCE,'source' )
    if not opif('md.dat')   : os.system('cp %s/md.dat .' %HOTBIT_SOURCE)
    if not opif('atoms.dat'): os.system('cp %s/atoms.dat .' %HOTBIT_SOURCE)
    if not opif('cyc.dat')  : os.system('cp %s/cyc.dat .' %HOTBIT_SOURCE)
    if opt.copy_param:
        cpt( HOTBIT_PARAM,'param' )
    else:
        os.symlink(HOTBIT_PARAM,'param')
    compile_flag('set')
    
elif mode=='clearout':
    if opt.info:
        print 'Delete the output files *.out, *.xyz, hotbit.log, *.gp, *.ps'
        sys.exit(0)
    print 'Clear the output files.'
    os.system('rm *.out')
    os.system('rm *.xyz')
    os.system('rm *.ps')
    os.system('rm *.gp')
    os.system('rm hotbit.log')
    
elif mode=='calculation':
    if opt.info:
        print 'Set up calculation into the current directory'
        print 'using the compiled copy (CC) of the code at the given'
        print 'directory.'        
        print 'Make link to source and copy or make link to param'
        print 'using the copy of the code at given directory.'
        print 'The CC has to be compiled.'
        print 'Copy *.dat from CC unless they already exist.'
        sys.exit(0)
    print "..."
    DIR=HOTBIT_DIR 
    #os.symlink(dir+'/source','source')
    if opt.copy_param:
        cpt( DIR+'/param','param' )
    #else:
        #os.symlink(dir+'/param','param')
    if not opif('md.dat')   : 
        if opif(DIR+'/md.dat'): mix.execute('cp %s/md.dat .' %DIR)
        else: mix.execute('cp %s/source/md.dat .' %DIR)
    if not opif('atoms.dat'): 
        if opif(DIR+'/atoms.dat'): mix.execute('cp %s/atoms.dat .' %DIR)
        else: mix.execute('cp %s/source/atoms.dat .' %DIR)
    if not opif('cyc.dat')  : 
        if opif(DIR+'/cyc.dat'): mix.execute('cp %s/cyc.dat .' %DIR)
        else: mix.execute('cp %s/source/cyc.dat .' %DIR)
    
elif mode=='progress':
    import time as t
    if opt.info:
        print 'Look at the progress of the calculation, e.g.'
        print 'where it is going (%)'
    steps  =float(os.popen('cat loop.out|wc -l').readline())-1
    mdsteps=float(mix.find_value('md.dat','mdsteps'))
    freq1  =float(mix.find_value('md.dat','out_freq1',default=1))
    ready  = steps/mdsteps*freq1
    start   =mix.find_value('hotbit.log','Total',fmt='onestr')
    date,tm =start.split('-')
    d,y     =date.split()
    d,month =d.split('.')
    h,m     =tm.split('.')
    m,s     =m.split(':')
    now     =t.time()
    start   =t.mktime((int(y),int(month),int(d),int(h),int(m),int(s),0,0,-1))
    to_go   =(1-ready)*(now-start)/ready
    tgh     =to_go/3600; tgm=to_go/60
    done    =t.localtime(now+to_go)
    ready   =min(1.0,max(0.0,ready))
    print 'Calculating...'
    print 'Estimate:'
    print '%10.3f %% ready' %(ready*100)
    print 'X'*int(ready*40)+'.'*(40-int(ready*40))
    print 'Hours to go: %3.1f (minutes to go: %5.1f)' %(tgh,tgm)
    print 'Estimated finishing time:',t.asctime(done)

else:
    print 'mode',mode,'not found.'
        
    
    
    