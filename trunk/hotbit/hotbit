#!/usr/bin/env python
"""
    Examples:
    ---------
    
    hotbit -e        
        list all examples
    
    hotbit -e Au     
        list all hotbit examples starting with 'Au'. 
        If there is only one, copy it to present directory
                     
    hotbit calc      (OR:) 
    hotbit Hotbit
        print documentation for Hotbit calculator class
    
    hotbit calc.rep  (OR:)
    hotbit Repulsion 
        print documentation for class Repulsion. 'calc.rep' 
        is an alias for 'Repulsion' because rep is an instance 
        for Repulsion class within calc.
        
        Other aliases are, at least:
            calc.rep        Repulsion (all repulsions)
            calc.rep.rep    RepulsivePotential (single repulsion)
            calc.st         States (main class for eigenstates etc)
            calc.ia         Interactions (H and S matrices)
            calc.el         Elements (closest interface with ASE atoms)
            calc.el.el      Element (single elements)
            calc.st.es      Electrostatics (charge transfer stuff)
            calc.st.solver  Solver (solving Kohn-Sham equations)
            calc.st.occ     Occupations 
    
"""

def list_copy_examples(exdir,arg,show):
    """
    List examples
    
    parameters:
    ===========
    exdir:      directory where examples (files or directories) are
    arg:        * if None, list all examples
                * if many examples start with string arg, list these examples
                * if only one examples start with string arg, copy it to present dir
    show:       If False, copy example, if True, only print the example
                (In which case the example must be a single file.)
    """    
    
    examples = os.listdir(exdir)
    
    files = []
    for file in examples:
        if '.svn' in file: continue
        if arg==None or (arg!=None and file.find(arg)==0):
            files.append(file)

    # if only one file or directory, copy it, otherwise list 
    if len(files)==1:
        full = os.path.join(exdir,files[0])
        if show:
            if os.path.isdir(full):
                raise AssertionError('Example %s must be a single file, not a folder.' %files[0])
            for line in open(full).readlines():
                print line,
        elif not show:
            
            if os.path.isfile(full):
                shutil.copyfile(full,files[0])
            elif os.path.isdir(full):
                shutil.copytree(full,files[0])
            print 'Copied example %s to present directory' %files[0]
    else:
        for file in files:
            print file
     
    


from hotbit import *
import os
import sys
import shutil
import inspect
#import pyclbr
from optparse import OptionParser

parser=OptionParser(add_help_option=False)
parser.set_usage('hotbit [options] arg') 
parser.add_option("-h", "--help", dest='help',action="store_true",default=False,help='print help')
parser.add_option('-e','--examples',dest='examples',action='store_true',default=False,help='list and copy examples')
parser.add_option('-s','--show-examples',dest='show',action='store_true',default=False,help='list and show examples')
parser.add_option('-l','--list',dest='list',action='store_true',default=False,help='list source code')
parser.add_option('-v','--version',dest='version',action='store_true',default=False,help='print hotbit version')

options, args = parser.parse_args( sys.argv[1:] )

assert not (options.list and options.examples)
if options.help:
    print '-------------------------'
    print '   Hotbit shell guide    '
    print '-------------------------'
    parser.print_help()
    print __doc__
    raise SystemExit

if options.version:
    print 'Hotbit version %s' %(hotbit_version)
    raise SystemExit
    
if len(args)==0:
    arg = None
else:
    arg = args[0]

pardir = os.environ.get('HOTBIT_PARAMETERS')
exdir = os.path.join(pardir,'..','examples')

   
if options.examples: 
    list_copy_examples(exdir,arg,options.show)
else:
    import hotbit
    aliases = {'Hotbit':'calc',\
               'Atoms':'calc.el.atoms',\
               'Elements':'calc.el',\
               'Element':'calc.el.element',\
               'Electrostatics':'calc.st.es',\
               'Environment':'calc.env',\
               'Interactions':'calc.ia',\
               'Occupations':'calc.st.occ',\
               'Repulsion':'calc.rep.',\
               'RepulsivePotential':'calc.rep.v',\
               'Solver':'calc.st.solver',\
               'States':'calc.st'}
         
    
    classes=[]
    for c in dir(hotbit):
        if c[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
            classes.append(c)
    classes.sort()
    
    if arg==None:
        #------------------------------------
        # list classes
        #------------------------------------
        for c in classes:
            if c in aliases:
                print '%-25s (%s)' %(c,aliases[c])
            else:
                print c
    else: 
        if arg.find('.')>0:
            # c should be a valid class
            c,m = arg.split('.')
            if c not in classes:
                raise AssertionError('Class %s was not found' %c)
            methods = dir(eval('%s' %c))
            if m in methods:
                found = [m]
            else:
                found = []
                for method in methods:
                    if method.find(m)==0:
                        found.append(method)
                        
            if len(found)==0:
                print 'No methods in %s starting "%s".' %(c,m)
            elif len(found)>1:
                print 'Methods in class %s starting "%s":' %(c,m)
                for item in found: print item
                raise SystemExit
            elif len(found)==1:
                method = found[0]
                instance = eval('%s.%s' %(c,method))
                if not options.list:
                    # print method arguments and doc
                    print 'Method %s in class %s:' %(c,method)
                    call = inspect.formatargspec(*inspect.getargspec(instance))
                    print '%s.%s %s' %(c,method,call)
                    print instance.__doc__
                    raise SystemExit
                else:
                    raise NotImplementedError('Code can be listed only for whole classes now.')
                    
        else:
            # --------------------------------------------
            # search and print info for entire classes
            # --------------------------------------------
            if arg in classes:
                found = [arg]
            else:
                found = []
                for c in classes:
                    if c.find(arg)==0:
                        found.append(c)
    
            if len(found)==0:
                print 'No class starting "%s" found.' %arg
                raise SystemExit
            elif len(found)>1:
                for item in found:
                    print 'Classes starting "%s":' %arg
                    for item in found: print item
                    raise SystemExit
            elif len(found)==1:
                cl = found[0]
                print 'Class %s' %cl
                print '--------------------'
                c = eval('%s' %cl)
                if options.list:
                    # list code
                    code = inspect.getsource(c)
                    print code
                    raise SystemExit
                else:
                    # print doc
                    init = eval('%s.__init__' %cl)
                    call = inspect.formatargspec(*inspect.getargspec(init))
                    print '%s %s' %(cl,call)
                    doc = inspect.getdoc(c.__init__)
                    if doc==None:
                        print 'No documentation for %s' %cl
                    else:
                        print '\n',doc
                    raise SystemExit
        