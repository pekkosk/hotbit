In order to enable wedge unit cell drawing method, 
please change View.make_box(self) in file 
 
     $HOME/ase/ase/gui/view.py

to the one found below.

Important: To switch between unit cell drawing methods,
the value of '_wedge_atoms' should be change manually, e.g,      

    _wedge_atoms = True
    _wedge_atoms = False




***********************
  New make_box(self)
***********************

    def make_box(self):
        """
        Important: To switch between unit cell drawing methods,
        the value of '_wedge_atoms' should be change manually, e.g,      
    
        _wedge_atoms = True
        _wedge_atoms = False
        """
        
        _wedge_atoms = True

        if not self.ui.get_widget('/MenuBar/ViewMenu/ShowUnitCell'
                                  ).get_active():
            self.B1 = self.B2 = npy.zeros((0, 3))
            return
        
        V = self.images.A[0]
        
        nn = []
        for c in range(3):
            v = V[c]
            d = sqrt(npy.dot(v, v))
            n = max(2, int(d / 0.3))
            nn.append(n)
        self.B1 = npy.zeros((2, 2, sum(nn), 3))
        self.B2 = npy.zeros((2, 2, sum(nn), 3))
        n1 = 0
        for c, n in enumerate(nn):
            #if c == 0:
            #    continue
            n2 = n1 + n
            h = 1.0 / (2 * n - 1)
            R = npy.arange(n) * (2 * h)

# original
#        for c, n in enumerate(nn):
#            n2 = n1 + n
#            h = 1.0 / (2 * n - 1)
#            R = npy.arange(n) * (2 * h)
#            for i, j in [(0, 0), (0, 1), (1, 0), (1, 1)]:
#                self.B1[i, j, n1:n2, c] = R
#                self.B1[i, j, n1:n2, (c + 1) % 3] = i
#                self.B1[i, j, n1:n2, (c + 2) % 3] = j
#            self.B2[:, :, n1:n2] = self.B1[:, :, n1:n2]
#            self.B2[:, :, n1:n2, c] += h
#            n1 = n2
#        self.B1.shape = (-1, 3)
#        self.B2.shape = (-1, 3)
        
        


            
            for i, j in [(0, 0), (0, 1), (1, 0), (1, 1)]:
            #for i, j in [(0, 0), (0, 1), (1, 0)]:
                if _wedge_atoms:
                    if ((c == 1) and ((i, j) == (0, 1))):
                        continue
                    if ((c == 0) and ((i, j) == (1, 0))):
                        continue
                    if ((i, j) == (1, 1)):
                        continue
                self.B1[i, j, n1:n2, c] = R
                self.B1[i, j, n1:n2, (c + 1) % 3] = i
                self.B1[i, j, n1:n2, (c + 2) % 3] = j              
                
                
            self.B2[:, :, n1:n2] = self.B1[:, :, n1:n2]
            self.B2[:, :, n1:n2, c] += h
            n1 = n2
        
        #self.B1 = npy.zeros(self.B1.shape)
        self.B1.shape = (-1, 3)
        #self.B2 = npy.zeros(self.B2.shape)
        self.B2.shape = (-1, 3)
        
*********************************************
  end of new make_box(self)
*********************************************




    

#def plot_cell(self):
  
What is
        V = self.images.A[0] ?!
Seams in V there are unit cell vectors!
    
    
    
        
***********************
  # draw new lines:
***********************
        
        
#===============================================================================
#        
#        V_old = self.images.A[0]
#        V = V_old.copy()
#        V[0] = V_old[0] - V_old[1]
#        V[1] = V_old[1] - V_old[2]
#        V[2] = V_old[2] - V_old[0]
#        
#        nn = []
#        for c in range(3):
#            v = V[c]
#            d = sqrt(npy.dot(v, v))
#            n = max(2, int(d / 0.3))
#            nn.append(n)
#        
#        self.B1_new = npy.zeros((2, 2, sum(nn), 3))
#        self.B2_new = npy.zeros((2, 2, sum(nn), 3))
#        n1 = 0
#        for c, n in enumerate(nn):
#            n2 = n1 + n
#            h = 1.0 / (2 * n - 1)
#            R = npy.arange(n) * (2 * h)
# 
#        for c, n in enumerate(nn):
#            n2 = n1 + n
#            h = 1.0 / (2 * n - 1)
#            R = npy.arange(n) * (2 * h)
#            for i, j in [(0, 0), (0, 1), (1, 0), (1, 1)]:
#                self.B1_new[i, j, n1:n2, c] = R
#                self.B1_new[i, j, n1:n2, (c + 1) % 3] = i
#                self.B1_new[i, j, n1:n2, (c + 2) % 3] = j
#            self.B2_new[:, :, n1:n2] = self.B1_new[:, :, n1:n2]
#            self.B2_new[:, :, n1:n2, c] += h
#            n1 = n2
#        
#        self.B1_new.shape = (-1, 3)
#        self.B2_new.shape = (-1, 3)
# 
#        self.B1 = npy.append(self.B1, self.B1_new).reshape((self.B1.shape[0]+self.B1_new.shape[0],3))
#        self.B2 = npy.append(self.B2, self.B2_new).reshape((self.B2.shape[0]+self.B2_new.shape[0],3))
#===============================================================================
    