import box.simu as simu
import box.mix as mix 
import numpy as nu
vector=nu.array

# add function to produce the replicas!!!!



def read_xyz(file):
    """
    Read molecule from file (filename or file object). pos is the position from where to read.
    """
    from os.path import exists
    
    if isinstance(file,str):
        # input was a file name: read it
        if not exists(file):
            mix.error_exit('File '+file+' does not exist. Exit now.')
        f=open(file)
        flines=f.readlines()
        f.close()
    else:
        # input was file object: read the next 'frame'
        flines=[]
        next=file.readline()
        if len(next)==0: return
        flines.append( next )
        flines.append( file.readline() )
        N=int(flines[0])
        for i in range(N):
            flines.append( file.readline() )
        if mix.eof(file): 
            file.close()
        
    atoms=[]
    for line in flines[2:len(flines)]:
        # read the atoms symbols and coordinates
        try:
            lst = line.strip().split()
            if len(lst)>4: mix.error_exit(file+' contains too much information for xyz file.')
            symb,x,y,z=(lst[0],float(lst[1]),float(lst[2]),float(lst[3]))
        except:
            break #probably end of file
        r=vector([x,y,z])/0.529177 #input in A
        atoms.append( simu.Atom(symb,r) )        
    return simu.Molecule(atoms)
            
def read_xyz_trajectory(file):
    """ Read xyz trajectory from given file (file name). """
    f=open(file,'r')
    traj=[]
    while 1:
        try:
            frame=read_xyz(f)        
        except:
            break
        traj.append(frame)
    f.close()
    return traj
            
def write_xyz_trajectory(trajectory,file):
    """ Write given molecule trajectory in xyz format. """
    f=open(file,'w')
    for molecule in trajectory:
        write_xyz(molecule,f)
    f.close()
    
def write_xyz(mol,file,comment='generated by write_xyz'):
    """
    Write the molecule into a xyz-file. 
    
    * file -- the output file name or file object. If it is a file
    object, the molecule is simpy appended as next "frame".
    """
    try:
        flag=0
        f=open(file,'w')
    except:
        flag=1
        f=file
    f.write(str(mol.get_N())+'\n')
    print>>f,comment
    
    sym=mol.get_symbols()
    r=mol.get_positions()
    for i in range(mol.get_N()):
        ri = r[i]*0.529177
        f.write( '%s %f %f %f\n' %(sym[i],ri[0],ri[1],ri[2])  )
    if flag==0: f.close()
        
        
    #def input_I_info(self,file):
        #"""
        #Reads molecule from I_info -file, used for Cmdft program.
        
        #* file -- the I_info file for input
        #"""
        #fi=open(file)
        #flines=fi.readlines()
        #N=0
        #for line in flines:
            #if line.find("\"")>=0: N+=1
        #for i in range(N):
            #line=flines[i+1]
            #symb=line[1:3]
            #rest=line[4:]
            #m,vel,x,y,z=rest.split()
            #vx,vy,vz=flines[N+(2*i+1)].split()
            #fx,fy,fz=flines[N+(2*i+2)].split()
            #r=array([float(x ),float(y) ,float(z)])
            #v=array([float(vx),float(vy),float(vz)])
            #f=array([float(fx),float(fy),float(fz)])
            #elem=Element(symb,self.efile)
            #elem.m=float(m)
            #elem.vel=float(vel)
            #self.add( Atom(elem,r,v,f) )
        #fi.close()
            
            
    #def input_xyz(self,file):
        #"""
        #Read molecule from xyz-file. 
        
        #* file -- the given input xyz-file. It can be either a file name
        #or a file object. If file is a file object the next "frame" is read
        #without rewinding the file.
        #"""
        #if isinstance(file,str):
            ## input was a file name: read it
            #if not os.path.exists(file):
                #mix.error_exit('File '+file+' does not exist. Exit now.')
            #f=open(file)
            #flines=f.readlines()
            #f.close()
        #else:
            ## input was file object: read the next 'frame'
            #flines=[]
            #next=file.readline()
            #if len(next)==0: return
            #flines.append( next )
            #flines.append( file.readline() )
            #N=int(flines[0])
            #for i in range(N):
                #flines.append( file.readline() )
        #for line in flines[2:len(flines)]:
            ## read the atoms symbols and coordinates
            #try:
                #lst = line.strip().split()
                #symb,x,y,z=(lst[0],lst[1],lst[2],lst[3])
                ##if len(lst)==4: symb,x,y,z=lst
                ##else: symb,x,y,z,rest=lst
            #except:
                #break #probably end of file
            #r=array([float(x),float(y),float(z)])/0.529177 #input in A
            #elem=Element(symb,self.efile)
            #atom=Atom(elem,r)
            #self.add(atom)

            
    #def output_xyz(self,file):
        #"""
        #Write the molecule into a xyz-file. 
        
        #* file -- the output file name or file object. If it is an file
        #object, the molecule is simpy appended as next "frame".
        #"""
        #try:
            #flag=0
            #f=open(file,'w')
        #except:
            #flag=1
            #f=file
        #f.write(str(self.N)+'\n')
        #f.write('xyz generated by write_xyz [md.py]\n')
        #for atom in self.atoms:
            #r = atom.r*0.529177
            #f.write( '%s %f %f %f\n' %(atom.el.element,r[0],r[1],r[2])  )
        #if flag==0: f.close()
        
    #def output_I_info(self,file):
        #"""
        #Write the molecule into a I_info-file for Cmdft.
         
         #* file -- the output file name.
        #"""
        #f=open(file,'w')
        #f.write('0\n')
        #for a in self.atoms:
            ## print coordinates
            ##f.write( "\""+symb+"\" "+vel+" "+m+" "+r[1:-1]+'\n'  )
            #f.write( "\"%s\" %6.2f %9.3f %.12g %.12g %.12g\n" \
                    #%(a.el.element,a.el.vel,a.el.m,a.r[0],a.r[1],a.r[2]) )
        #for a in self.atoms:
            ## print forces and velocities
            #f.write( "%.12g %.12g %.12g\n" %(a.v[0],a.v[1],a.v[2]) )
            #f.write( "%.12g %.12g %.12g\n" %(a.f[0],a.f[1],a.f[2]) )
        #f.close()
        
       
    #def output_atoms_dat_old(self,file):
        #"""
        #Writes the molecule into an atoms.dat file.
        
        #This is for the older (<5.3 2007) version of atoms.dat.
        
        #* file -- output file name
        #"""
        #f=open(file,'w')
        #f.write("<----------------Total number of atoms\n")
        #f.write( str(self.N)+"\n" )
        #f.write("<----------------Number of occupied orbitals\n")
        #f.write(str(self.vel/2.)+'\n')
        #f.write("<----------------Element,mass,coord,act,langevin\n")
        #for atom in self.atoms:
            #m = str(atom.el.m)
            #r = str(atom.r)
            #f.write( atom.el.element+" "+m+" "+r[1:-1]+" 1 0 0\n")
        #f.write("<----------------velocities\n")
        #for atom in self.atoms:
            #f.write( str( atom.v )[1:-1]+"\n")
        #f.write("<----------------forces\n")
        #for atom in self.atoms:
            #f.write( str( atom.f )[1:-1]+"\n")
        #f.close()
        
    